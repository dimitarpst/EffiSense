
<div class="container">
        <h1 class="text-center mb-4">Dashboard</h1>

    <div class="row g-4">
        <div class="col-lg-6 col-md-12 d-flex">
            <div class="p-4 border rounded shadow-sm bg-light text-center flex-grow-1 d-flex flex-column justify-content-center align-items-center">

                <div class="d-flex align-items-center gap-2 mb-3">
                    <h4 class="m-0">IoT Simulation Control</h4>
                    <div id="simulationIndicator" class="status-light bg-danger"></div>
                </div>

                <button id="toggleSimulation" class="btn btn-lg btn-primary d-flex align-items-center justify-content-center">
                    <span class="material-icons" id="simulationIcon">play_arrow</span>
                </button>

            </div>
        </div>

        <div class="col-lg-6 col-md-12 d-flex">
            <div class="p-4 border rounded shadow-sm bg-light text-center flex-grow-1 d-flex flex-column justify-content-center align-items-center">
                <h5 class="mb-3">Set Simulation Interval (1-60s)</h5>
                <div class="input-group" style="max-width: 200px;">
                    <input type="number" id="intervalInput" class="form-control text-center" min="1" max="60" value="5" />
                    <button class="btn btn-primary px-3" id="updateInterval">Update</button>
                </div>
            </div>
        </div>
    </div>

    <div class="container text-center">
        <button id="fillDatabaseButton" class="btn btn-primary">Fill up database</button>
        <div id="fillDatabaseStatus" class="mt-2 text-success"></div>
    </div>
    <div class="row g-4 align-items-stretch">
        <div class="col-lg-12 col-12">
            <div class="card shadow h-100">
                <div class="card-body">
                    <h4 class="card-title text-center">Energy Usage by Day</h4>
                    <canvas id="usageChart" height="200"></canvas>
                </div>
            </div>
        </div>

        <div class="col-lg-12 col-12">
            <div class="card shadow h-100">
                <div class="card-body">
                    <h4 class="card-title text-center">Energy Usage by Appliance</h4>
                    <canvas id="applianceChart" height="200"></canvas>
                </div>
            </div>
        </div>

        <div class="col-lg-6 col-12">
            <div class="card shadow h-100">
                <div class="card-body">
                    <h4 class="card-title text-center">Energy Usage by Home</h4>
                    <canvas id="homeChart" height="200"></canvas>
                </div>
            </div>
        </div>

        <div class="col-lg-6 col-12">
            <div class="card shadow h-100">
                <div class="card-body">
                    <h4 class="card-title text-center">Peak Energy Usage Times</h4>
                    <canvas id="peakTimeChart" height="200"></canvas>
                </div>
            </div>
        </div>

        <div class="col-lg-6 col-12">
            <div class="card shadow-lg h-100">
                <div class="card-body">
                    <h4 class="card-title text-center">Energy Usage per Hour</h4>
                    <canvas id="hourlyChart" height="200"></canvas>
                </div>
            </div>
        </div>

        <div class="col-lg-6 col-12">
            <div class="card shadow-lg h-100">
                <div class="card-body">
                    <h4 class="card-title text-center">Energy Usage by Weekday</h4>
                    <canvas id="weekdayChart" height="200"></canvas>
                </div>
            </div>
        </div>

    </div>

    <div class="mt-5">
        <h2>Energy Efficiency Suggestions</h2>
        <div>
            <label for="userPrompt">Provide additional details for a suggestion:</label>
            <input type="text" id="userPrompt" class="form-control" placeholder="e.g., I use my air conditioner every day." />
            <button id="getSuggestionButton" class="btn btn-primary mt-2">Get Suggestion</button>
        </div>
        <div id="suggestionContainer" class="fs-5 mt-3"></div>
    </div>
    </div>

@section Scripts {
    <script src="~/js/charts/usageChart.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const suggestionContainer = document.getElementById('suggestionContainer');
            suggestionContainer.style.display = 'none';

            document.getElementById('getSuggestionButton').addEventListener('click', function () {
                const userPrompt = document.getElementById('userPrompt').value;
                suggestionContainer.style.display = 'block';
                suggestionContainer.innerHTML = `<div class="spinner-border text-primary" role="status">
                                                    <span class="visually-hidden">Loading...</span>
                                                 </div>`;

                fetch(`/Usages/GetDashboardSuggestion`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(userPrompt),
                })
                .then(response => response.json())
                .then(data => {
                    suggestionContainer.innerHTML = data.success
                        ? `<p><strong>Suggestion:</strong> ${data.suggestion}</p>`
                        : `<p class="text-danger">${data.message}</p>`;
                })
                .catch(error => {
                    console.error('Error fetching suggestion:', error);
                    suggestionContainer.innerHTML = `<p class="text-danger">An error occurred. Please try again.</p>`;
                });
            });

            document.getElementById('fillDatabaseButton').addEventListener('click', function () {
                const statusContainer = document.getElementById('fillDatabaseStatus');
                statusContainer.innerHTML = `<div class="spinner-border text-success" role="status">
                                                <span class="visually-hidden">Loading...</span>
                                             </div>`;

                fetch(`/Home/FillDatabase`, { method: 'POST', headers: { 'Content-Type': 'application/json' } })
                .then(response => response.json())
                .then(data => {
                    statusContainer.innerHTML = `<p><strong>${data.message}</strong></p>`;
                    if (data.success) setTimeout(() => location.reload(), 1000);
                })
                .catch(error => {
                    console.error('Error:', error);
                    statusContainer.innerHTML = `<p class="text-danger">An error occurred. Try again.</p>`;
                });
            });

               const toggleButton = document.getElementById("toggleSimulation");
        const simulationIndicator = document.getElementById("simulationIndicator");
        const simulationIcon = document.getElementById("simulationIcon");

        let isSimulationRunning = false;

        fetch("/Home/GetSimulationState")
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    isSimulationRunning = data.isRunning;
                    updateSimulationUI();
                }
            })
            .catch(error => console.error("Error fetching simulation state:", error));

        toggleButton.addEventListener("click", function () {
            isSimulationRunning = !isSimulationRunning;
            fetch(`/Home/ToggleSimulation?enable=${isSimulationRunning}`, { method: 'POST' })
            .then(response => response.json())
            .then(data => {
                if (data.success) updateSimulationUI();
            });
        });

        function updateSimulationUI() {
                simulationIcon.textContent = isSimulationRunning ? "stop" : "play_arrow";

                if (isSimulationRunning) {
                    simulationIndicator.classList.add("active");
                    simulationIndicator.classList.remove("inactive");
                } else {
                    simulationIndicator.classList.add("inactive");
                    simulationIndicator.classList.remove("active");
                }
            }


        });
    </script>
}
